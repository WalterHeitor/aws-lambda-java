/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package br.com.softwalter;

import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.RequestHandler;
import com.amazonaws.services.lambda.runtime.events.S3Event;
import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.SendMessageRequest;
import com.amazonaws.services.sqs.model.SendMessageResult;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class App implements RequestHandler<S3Event, Void> {

    private final ObjectMapper objectMapper = new ObjectMapper();
    private final AmazonSQS sqs = AmazonSQSClientBuilder.defaultClient();
    private final String sqsQueueUrl = "YOUR_SQS_QUEUE_URL";

    @Override
    public Void handleRequest(S3Event s3Event, Context context) {
        try {
            // Iterar sobre todos os registros no evento S3
            for (S3Event.S3EventNotificationRecord record : s3Event.getRecords()) {
                // Extrair o nome do bucket e o nome do objeto
                String bucketName = record.getS3().getBucket().getName();
                String objectKey = record.getS3().getObject().getKey();

                // Obter o conteúdo do objeto S3
                String objectContent = getObjectContent(bucketName, objectKey);

                // Transformar o conteúdo do objeto S3 em uma entidade
                Map<String, String> entity = transformObjectContent(objectContent);

                // Enviar a entidade para a fila SQS
                sendToSQS(entity);
            }
        } catch (IOException e) {
            // Lidar com exceções de IO
            context.getLogger().log("Erro ao processar evento S3: " + e.getMessage());
        }
        return null;
    }

    private String getObjectContent(String bucketName, String objectKey) throws IOException {
        // Lógica para obter o conteúdo do objeto S3
        // Aqui estou simulando o conteúdo do objeto para fins de exemplo
        return "{\"id\": \"1\", \"first_name\": \"John\", \"last_name\": \"Doe\", \"email\": \"john.doe@example.com\", \"gender\": \"Male\", \"ip_address\": \"192.168.1.1\"}";
    }

    private Map<String, String> transformObjectContent(String objectContent) throws IOException {
        // Transformar o conteúdo do objeto em uma entidade
        Map<String, String> entity = objectMapper.readValue(objectContent, HashMap.class);
        return entity;
    }

    private void sendToSQS(Map<String, String> entity) throws JsonProcessingException {
        // Enviar a entidade para a fila SQS
        SendMessageRequest sendMessageRequest = new SendMessageRequest()
                .withQueueUrl(sqsQueueUrl)
                .withMessageBody(objectMapper.writeValueAsString(entity));
        SendMessageResult sendMessageResult = sqs.sendMessage(sendMessageRequest);
    }
}

